// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"archive/tar"
	"io/fs"

	"github.com/knockturnmc/marauder/marauder-lib/pkg/utils"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFriendlyTarballWriter creates a new instance of MockFriendlyTarballWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFriendlyTarballWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFriendlyTarballWriter {
	mock := &MockFriendlyTarballWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFriendlyTarballWriter is an autogenerated mock type for the FriendlyTarballWriter type
type MockFriendlyTarballWriter struct {
	mock.Mock
}

type MockFriendlyTarballWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFriendlyTarballWriter) EXPECT() *MockFriendlyTarballWriter_Expecter {
	return &MockFriendlyTarballWriter_Expecter{mock: &_m.Mock}
}

// Add provides a mock function for the type MockFriendlyTarballWriter
func (_mock *MockFriendlyTarballWriter) Add(rootFs fs.FS, filePathInFS string, filePathInTarball string) ([]utils.WriteResult, error) {
	ret := _mock.Called(rootFs, filePathInFS, filePathInTarball)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 []utils.WriteResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(fs.FS, string, string) ([]utils.WriteResult, error)); ok {
		return returnFunc(rootFs, filePathInFS, filePathInTarball)
	}
	if returnFunc, ok := ret.Get(0).(func(fs.FS, string, string) []utils.WriteResult); ok {
		r0 = returnFunc(rootFs, filePathInFS, filePathInTarball)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]utils.WriteResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(fs.FS, string, string) error); ok {
		r1 = returnFunc(rootFs, filePathInFS, filePathInTarball)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFriendlyTarballWriter_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockFriendlyTarballWriter_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - rootFs fs.FS
//   - filePathInFS string
//   - filePathInTarball string
func (_e *MockFriendlyTarballWriter_Expecter) Add(rootFs interface{}, filePathInFS interface{}, filePathInTarball interface{}) *MockFriendlyTarballWriter_Add_Call {
	return &MockFriendlyTarballWriter_Add_Call{Call: _e.mock.On("Add", rootFs, filePathInFS, filePathInTarball)}
}

func (_c *MockFriendlyTarballWriter_Add_Call) Run(run func(rootFs fs.FS, filePathInFS string, filePathInTarball string)) *MockFriendlyTarballWriter_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 fs.FS
		if args[0] != nil {
			arg0 = args[0].(fs.FS)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFriendlyTarballWriter_Add_Call) Return(writeResults []utils.WriteResult, err error) *MockFriendlyTarballWriter_Add_Call {
	_c.Call.Return(writeResults, err)
	return _c
}

func (_c *MockFriendlyTarballWriter_Add_Call) RunAndReturn(run func(rootFs fs.FS, filePathInFS string, filePathInTarball string) ([]utils.WriteResult, error)) *MockFriendlyTarballWriter_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddFile provides a mock function for the type MockFriendlyTarballWriter
func (_mock *MockFriendlyTarballWriter) AddFile(rootFs fs.FS, filePathInFS string, filePathInTarball string) (utils.WriteResult, error) {
	ret := _mock.Called(rootFs, filePathInFS, filePathInTarball)

	if len(ret) == 0 {
		panic("no return value specified for AddFile")
	}

	var r0 utils.WriteResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(fs.FS, string, string) (utils.WriteResult, error)); ok {
		return returnFunc(rootFs, filePathInFS, filePathInTarball)
	}
	if returnFunc, ok := ret.Get(0).(func(fs.FS, string, string) utils.WriteResult); ok {
		r0 = returnFunc(rootFs, filePathInFS, filePathInTarball)
	} else {
		r0 = ret.Get(0).(utils.WriteResult)
	}
	if returnFunc, ok := ret.Get(1).(func(fs.FS, string, string) error); ok {
		r1 = returnFunc(rootFs, filePathInFS, filePathInTarball)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFriendlyTarballWriter_AddFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFile'
type MockFriendlyTarballWriter_AddFile_Call struct {
	*mock.Call
}

// AddFile is a helper method to define mock.On call
//   - rootFs fs.FS
//   - filePathInFS string
//   - filePathInTarball string
func (_e *MockFriendlyTarballWriter_Expecter) AddFile(rootFs interface{}, filePathInFS interface{}, filePathInTarball interface{}) *MockFriendlyTarballWriter_AddFile_Call {
	return &MockFriendlyTarballWriter_AddFile_Call{Call: _e.mock.On("AddFile", rootFs, filePathInFS, filePathInTarball)}
}

func (_c *MockFriendlyTarballWriter_AddFile_Call) Run(run func(rootFs fs.FS, filePathInFS string, filePathInTarball string)) *MockFriendlyTarballWriter_AddFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 fs.FS
		if args[0] != nil {
			arg0 = args[0].(fs.FS)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFriendlyTarballWriter_AddFile_Call) Return(writeResult utils.WriteResult, err error) *MockFriendlyTarballWriter_AddFile_Call {
	_c.Call.Return(writeResult, err)
	return _c
}

func (_c *MockFriendlyTarballWriter_AddFile_Call) RunAndReturn(run func(rootFs fs.FS, filePathInFS string, filePathInTarball string) (utils.WriteResult, error)) *MockFriendlyTarballWriter_AddFile_Call {
	_c.Call.Return(run)
	return _c
}

// AddFolder provides a mock function for the type MockFriendlyTarballWriter
func (_mock *MockFriendlyTarballWriter) AddFolder(rootFs fs.FS, folderPathInFS string, folderPathInTarball string) ([]utils.WriteResult, error) {
	ret := _mock.Called(rootFs, folderPathInFS, folderPathInTarball)

	if len(ret) == 0 {
		panic("no return value specified for AddFolder")
	}

	var r0 []utils.WriteResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(fs.FS, string, string) ([]utils.WriteResult, error)); ok {
		return returnFunc(rootFs, folderPathInFS, folderPathInTarball)
	}
	if returnFunc, ok := ret.Get(0).(func(fs.FS, string, string) []utils.WriteResult); ok {
		r0 = returnFunc(rootFs, folderPathInFS, folderPathInTarball)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]utils.WriteResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(fs.FS, string, string) error); ok {
		r1 = returnFunc(rootFs, folderPathInFS, folderPathInTarball)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFriendlyTarballWriter_AddFolder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFolder'
type MockFriendlyTarballWriter_AddFolder_Call struct {
	*mock.Call
}

// AddFolder is a helper method to define mock.On call
//   - rootFs fs.FS
//   - folderPathInFS string
//   - folderPathInTarball string
func (_e *MockFriendlyTarballWriter_Expecter) AddFolder(rootFs interface{}, folderPathInFS interface{}, folderPathInTarball interface{}) *MockFriendlyTarballWriter_AddFolder_Call {
	return &MockFriendlyTarballWriter_AddFolder_Call{Call: _e.mock.On("AddFolder", rootFs, folderPathInFS, folderPathInTarball)}
}

func (_c *MockFriendlyTarballWriter_AddFolder_Call) Run(run func(rootFs fs.FS, folderPathInFS string, folderPathInTarball string)) *MockFriendlyTarballWriter_AddFolder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 fs.FS
		if args[0] != nil {
			arg0 = args[0].(fs.FS)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFriendlyTarballWriter_AddFolder_Call) Return(writeResults []utils.WriteResult, err error) *MockFriendlyTarballWriter_AddFolder_Call {
	_c.Call.Return(writeResults, err)
	return _c
}

func (_c *MockFriendlyTarballWriter_AddFolder_Call) RunAndReturn(run func(rootFs fs.FS, folderPathInFS string, folderPathInTarball string) ([]utils.WriteResult, error)) *MockFriendlyTarballWriter_AddFolder_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockFriendlyTarballWriter
func (_mock *MockFriendlyTarballWriter) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFriendlyTarballWriter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockFriendlyTarballWriter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockFriendlyTarballWriter_Expecter) Close() *MockFriendlyTarballWriter_Close_Call {
	return &MockFriendlyTarballWriter_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockFriendlyTarballWriter_Close_Call) Run(run func()) *MockFriendlyTarballWriter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFriendlyTarballWriter_Close_Call) Return(err error) *MockFriendlyTarballWriter_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFriendlyTarballWriter_Close_Call) RunAndReturn(run func() error) *MockFriendlyTarballWriter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// WithFilter provides a mock function for the type MockFriendlyTarballWriter
func (_mock *MockFriendlyTarballWriter) WithFilter(filter func(pathInFS string, pathInTarball string) bool) utils.FriendlyTarballWriter {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for WithFilter")
	}

	var r0 utils.FriendlyTarballWriter
	if returnFunc, ok := ret.Get(0).(func(func(pathInFS string, pathInTarball string) bool) utils.FriendlyTarballWriter); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.FriendlyTarballWriter)
		}
	}
	return r0
}

// MockFriendlyTarballWriter_WithFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithFilter'
type MockFriendlyTarballWriter_WithFilter_Call struct {
	*mock.Call
}

// WithFilter is a helper method to define mock.On call
//   - filter func(pathInFS string, pathInTarball string) bool
func (_e *MockFriendlyTarballWriter_Expecter) WithFilter(filter interface{}) *MockFriendlyTarballWriter_WithFilter_Call {
	return &MockFriendlyTarballWriter_WithFilter_Call{Call: _e.mock.On("WithFilter", filter)}
}

func (_c *MockFriendlyTarballWriter_WithFilter_Call) Run(run func(filter func(pathInFS string, pathInTarball string) bool)) *MockFriendlyTarballWriter_WithFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func(pathInFS string, pathInTarball string) bool
		if args[0] != nil {
			arg0 = args[0].(func(pathInFS string, pathInTarball string) bool)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFriendlyTarballWriter_WithFilter_Call) Return(friendlyTarballWriter utils.FriendlyTarballWriter) *MockFriendlyTarballWriter_WithFilter_Call {
	_c.Call.Return(friendlyTarballWriter)
	return _c
}

func (_c *MockFriendlyTarballWriter_WithFilter_Call) RunAndReturn(run func(filter func(pathInFS string, pathInTarball string) bool) utils.FriendlyTarballWriter) *MockFriendlyTarballWriter_WithFilter_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockFriendlyTarballWriter
func (_mock *MockFriendlyTarballWriter) Write(fileContent []byte, header tar.Header) error {
	ret := _mock.Called(fileContent, header)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]byte, tar.Header) error); ok {
		r0 = returnFunc(fileContent, header)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFriendlyTarballWriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockFriendlyTarballWriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - fileContent []byte
//   - header tar.Header
func (_e *MockFriendlyTarballWriter_Expecter) Write(fileContent interface{}, header interface{}) *MockFriendlyTarballWriter_Write_Call {
	return &MockFriendlyTarballWriter_Write_Call{Call: _e.mock.On("Write", fileContent, header)}
}

func (_c *MockFriendlyTarballWriter_Write_Call) Run(run func(fileContent []byte, header tar.Header)) *MockFriendlyTarballWriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		var arg1 tar.Header
		if args[1] != nil {
			arg1 = args[1].(tar.Header)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFriendlyTarballWriter_Write_Call) Return(err error) *MockFriendlyTarballWriter_Write_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFriendlyTarballWriter_Write_Call) RunAndReturn(run func(fileContent []byte, header tar.Header) error) *MockFriendlyTarballWriter_Write_Call {
	_c.Call.Return(run)
	return _c
}
