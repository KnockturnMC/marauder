// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// FriendlyTarballWriter is an autogenerated mock type for the FriendlyTarballWriter type
type FriendlyTarballWriter struct {
	mock.Mock
}

type FriendlyTarballWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *FriendlyTarballWriter) EXPECT() *FriendlyTarballWriter_Expecter {
	return &FriendlyTarballWriter_Expecter{mock: &_m.Mock}
}

// AddFile provides a mock function with given fields: rootFs, filePathInFS, filePathInTarball
func (_m *FriendlyTarballWriter) AddFile(rootFs fs.FS, filePathInFS string, filePathInTarball string) error {
	ret := _m.Called(rootFs, filePathInFS, filePathInTarball)

	var r0 error
	if rf, ok := ret.Get(0).(func(fs.FS, string, string) error); ok {
		r0 = rf(rootFs, filePathInFS, filePathInTarball)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FriendlyTarballWriter_AddFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFile'
type FriendlyTarballWriter_AddFile_Call struct {
	*mock.Call
}

// AddFile is a helper method to define mock.On call
//   - rootFs fs.FS
//   - filePathInFS string
//   - filePathInTarball string
func (_e *FriendlyTarballWriter_Expecter) AddFile(rootFs interface{}, filePathInFS interface{}, filePathInTarball interface{}) *FriendlyTarballWriter_AddFile_Call {
	return &FriendlyTarballWriter_AddFile_Call{Call: _e.mock.On("AddFile", rootFs, filePathInFS, filePathInTarball)}
}

func (_c *FriendlyTarballWriter_AddFile_Call) Run(run func(rootFs fs.FS, filePathInFS string, filePathInTarball string)) *FriendlyTarballWriter_AddFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fs.FS), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FriendlyTarballWriter_AddFile_Call) Return(_a0 error) *FriendlyTarballWriter_AddFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FriendlyTarballWriter_AddFile_Call) RunAndReturn(run func(fs.FS, string, string) error) *FriendlyTarballWriter_AddFile_Call {
	_c.Call.Return(run)
	return _c
}

// AddFolder provides a mock function with given fields: rootFs, folderPathInFS, folderPathInTarball
func (_m *FriendlyTarballWriter) AddFolder(rootFs fs.FS, folderPathInFS string, folderPathInTarball string) error {
	ret := _m.Called(rootFs, folderPathInFS, folderPathInTarball)

	var r0 error
	if rf, ok := ret.Get(0).(func(fs.FS, string, string) error); ok {
		r0 = rf(rootFs, folderPathInFS, folderPathInTarball)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FriendlyTarballWriter_AddFolder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFolder'
type FriendlyTarballWriter_AddFolder_Call struct {
	*mock.Call
}

// AddFolder is a helper method to define mock.On call
//   - rootFs fs.FS
//   - folderPathInFS string
//   - folderPathInTarball string
func (_e *FriendlyTarballWriter_Expecter) AddFolder(rootFs interface{}, folderPathInFS interface{}, folderPathInTarball interface{}) *FriendlyTarballWriter_AddFolder_Call {
	return &FriendlyTarballWriter_AddFolder_Call{Call: _e.mock.On("AddFolder", rootFs, folderPathInFS, folderPathInTarball)}
}

func (_c *FriendlyTarballWriter_AddFolder_Call) Run(run func(rootFs fs.FS, folderPathInFS string, folderPathInTarball string)) *FriendlyTarballWriter_AddFolder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fs.FS), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FriendlyTarballWriter_AddFolder_Call) Return(_a0 error) *FriendlyTarballWriter_AddFolder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FriendlyTarballWriter_AddFolder_Call) RunAndReturn(run func(fs.FS, string, string) error) *FriendlyTarballWriter_AddFolder_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *FriendlyTarballWriter) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FriendlyTarballWriter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type FriendlyTarballWriter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *FriendlyTarballWriter_Expecter) Close() *FriendlyTarballWriter_Close_Call {
	return &FriendlyTarballWriter_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *FriendlyTarballWriter_Close_Call) Run(run func()) *FriendlyTarballWriter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FriendlyTarballWriter_Close_Call) Return(_a0 error) *FriendlyTarballWriter_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FriendlyTarballWriter_Close_Call) RunAndReturn(run func() error) *FriendlyTarballWriter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// NewFriendlyTarballWriter creates a new instance of FriendlyTarballWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFriendlyTarballWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *FriendlyTarballWriter {
	mock := &FriendlyTarballWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
